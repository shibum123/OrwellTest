module.exports = function (grunt) {

    grunt.file.write(
        'tests/unit/global.js',
        '// This is loaded into the PhantomJs browser - do not edit - this is auto-generated by Gruntfile.js \nvar __dirname = \'' + __dirname + '\';\nvar __dirnameglobal = \'' + __dirname + '\';'
    );

    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),
        jshint: {
            files: [
                'application/scripts/**/*.js',
                'tests/**/*Spec.js'
            ]
        },
        connect: {
            options: {
                port: 8088,
                base: 'application/'
            },
            server: {
                options: {
                    livereload: true,
                    background: true
                }
            },
            devServer: {
                options: {
                    livereload: false,
                    background: false,
                    keepalive: true
                }
            },
            testserver: {
                options: {
                    port: 9999,
                    livereload: true,
                    background: true
                }
            }
        },
        protractor: {
            options: {
                configFile: 'protractor.conf.js',
                noColor: false,
                // debug: true,
                args: {
                }
            },
            e2e: {
                options: {
                    // Stops Grunt process if a test fails
                    keepAlive: false
                }
            },
            continuous: {
                options: {
                    keepAlive: true
                }
            }
        },
        clean: {
            all: {
                src: ['application/scripts/bundle.js']
            }
        },
        sass: {
            dist: {                      // Target
                options: {               // Target options
                    style: 'expanded'
                },
                files: {                 // Dictionary of files
                    'application/styles/app.css': 'application/styles/app.scss'   // 'destination': 'source' // not configured
                }
            }
        },
        browserify: {
            bundle: {
                files: {
                    'application/scripts/bundle.js': [
                        'application/bower_components/jquery/dist/jquery.js',
                        'application/bower_components/angular/angular.js',
                        'application/bower_components/angular-aria/angular-aria.js',
                        'application/bower_components/angular-bootstrap/ui-bootstrap-tpls.js',
                        'application/bower_components/angular-animate/angular-animate.js',
                        'application/bower_components/angular-route/angular-route.js',
                        'application/bower_components/angular-route-segment/build/angular-route-segment.js',
                        'application/scripts/**/*.js',
                        'application/scripts/**/*.json'
                    ]
                },
                options: {
                    exclude: ['application/scripts/bundle.js'],
                    watch: false,
                    banner: '/*\nORWELL - Recipe\n*/',
                    browserifyOptions: {
                        debug: true,
                        basedir: 'application/'
                    },
                    alias: {
                        'angular': './bower_components/angular/angular.js',
                        'angular-bootstrap': './bower_components/angular-bootstrap/ui-bootstrap-tpls.js',
                        'angular-route': './bower_components/angular-route/angular-route.js',
                        'angular-route-segment': './bower_components/angular-route-segment/build/angular-route-segment.js'
                    }
                }
            }
        },
        karma: {
            unit: {
                configFile: 'tests/unit/karma.conf.js'
            }
        },
        watch: {
            scripts: {
                files: [
                    'application/scripts/**/*.js',
                    'application/scripts/**/*.json',
                    'application/scripts/**/*.scss',
                    'application/**/*.html',
                    '!application/scripts/bundle.js'
                ],
                tasks: ['dev-build'],
                options: {
                    spawn: false,
                    interrupt: true,
                    debounceDelay: 250,
                    livereload: true,
                    event: ['changed', 'deleted']
                }
            }
        },
        browserSync: {
            bsFiles: {
                src : [
                    'application/scripts/**/*.js',
                    'application/scripts/**/*.scss',
                    'application/**/*.html',
                    '!application/scripts/bundle.js'
                ]
            },
            options: {
                server: {
                    baseDir: "./application"
                }
            }
        },
        test: {
            files: ['tests/**/*Spec.js'],
            tasks: ['test'],
            options: {
                spawn: false,
                interrupt: true,
                debounceDelay: 250
            }
        }
    });

    grunt.loadNpmTasks('grunt-protractor-runner');
    grunt.loadNpmTasks('grunt-contrib-clean');
    grunt.loadNpmTasks('grunt-contrib-connect');
    grunt.loadNpmTasks('grunt-contrib-sass');
    grunt.loadNpmTasks('grunt-contrib-watch');
    grunt.loadNpmTasks('grunt-browserify');
    grunt.loadNpmTasks('grunt-contrib-jshint');
    grunt.loadNpmTasks('grunt-karma');
    grunt.loadNpmTasks('grunt-browser-sync');

    grunt.registerTask('banner', 'Generate Banner', function () {
        grunt.log.ok('- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -grunt test                : runs ALL test suites\n      grunt test-unit           : runs the unit tests\n      grunt test-system         : runs the system tests\n      grunt dev-build (default) : dev build\n      grunt dev-serve           : build and serve (use CTRL+C to exit)\n      grunt dev-watch           : build, serve and watch for changes\n      grunt prod-build          : production build\n\nnb: dev-serve listens on http://localhost:8088/\nnb: test-server listens on http://localhost:9999/\nnb: protractor listens on http://localhost:4444/\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -');
    });

    grunt.registerTask('test', ['karma:unit:start', 'connect:testserver', 'protractor:e2e']);
    grunt.registerTask('test-unit', ['karma:unit:start']);

    grunt.registerTask('dev-build', ['banner', 'clean:all', 'browserify']);
    grunt.registerTask('dev-serve', ['clean:all', 'dev-build', 'connect:devServer']);

    grunt.registerTask('default', ['dev-build']);
    grunt.registerTask('live', ['browserSync', 'watch']);
};